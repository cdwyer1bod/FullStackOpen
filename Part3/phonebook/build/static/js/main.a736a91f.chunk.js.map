{"version":3,"sources":["services/persons.js","components/Person.js","components/Persons.js","components/PersonForm.js","components/Filter.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Person","person","destroyContact","name","number","onClick","Persons","persons","personElements","map","e","key","PersonForm","addContact","handleNameChange","handleNumberChange","onSubmit","onChange","type","Filter","handleFilterChange","Notification","message","className","text","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","notificationMessage","setNotificationMessage","personsToShow","length","filter","search","useEffect","personService","initialPersons","RegExp","target","value","preventDefault","newPersonObject","msg","duplicatePerson","find","p","window","confirm","returnedPerson","setTimeout","concat","Number","destroyedPerson","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a736a91f.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const response = axios.get(baseUrl)\n\n    return response.then(response => {\n        return response.data\n    })\n}\n\nconst create = (newObject) => {\n    const response = axios.post(baseUrl, newObject)\n\n    return response.then(response => {\n        return response.data\n    })\n}\n\nconst update = (id, newObject) => {\n    const response = axios.put(`${baseUrl}/${id}`, newObject)\n\n    return response.then(response => {\n        return response.data\n    })\n}\n\nconst destroy = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default {\n  getAll,\n  create,\n  update,\n  destroy\n}\n","import React from 'react'\n\nconst Person = ({ person, destroyContact }) => {\n    return (\n        <li>\n            { `${ person.name } - ${ person.number }` }\n            <button name={ person.name } id={ person.id } onClick={ destroyContact }>delete</button>\n         </li>\n    )\n}\n\nexport default Person\n","import React from 'react'\n\nimport Person from './Person'\n\nconst Persons = ({ persons, destroyContact }) => {\n    const personElements = persons.map((e) => {\n        return (\n            <Person\n                key= { e.id }\n                person={ e }\n                destroyContact ={ destroyContact }\n            />\n        )\n    });\n\n    return (\n        <ul>\n            { personElements }\n        </ul>\n    )\n}\n\nexport default Persons\n","import React from 'react'\n\nconst PersonForm = ({ addContact, handleNameChange, handleNumberChange }) => {\n    return (\n        <form onSubmit={ addContact }>\n            <div>\n                name:\n                <input onChange={ handleNameChange }/>\n            </div>\n            <div>\n                number:\n                <input onChange={ handleNumberChange }/>\n            </div>\n\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm\n","import React from 'react'\n\nconst Filter = ({ handleFilterChange }) => {\n    return (\n        <div>\n            filter shown with:\n            <input onChange={ handleFilterChange }/>\n        </div>\n    )\n}\n\nexport default Filter\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className={ message.type === \"error\" ? \"error\" : \"notification\" }>\n            { message.text }\n        </div>\n    )\n}\n\nexport default Notification\n","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport Notification from './components/Notification'\n\nimport './index.css'\n\nconst App = () => {\n    const [ persons, setPersons] = useState([])\n    const [ newName, setNewName ] = useState('')\n    const [ newNumber, setNewNumber ] = useState('')\n    const [ newFilter, setNewFilter ] = useState('')\n    const [ notificationMessage, setNotificationMessage] = useState(null)\n\n    const personsToShow = newFilter.length === 0 ? persons\n                            : persons.filter(person => person.name.search(newFilter) >= 0)\n\n    useEffect(() => {\n        const dataHook = () => {\n            personService\n                .getAll()\n                .then(initialPersons => {\n                    setPersons(initialPersons)\n                })\n        }\n\n        dataHook()\n    }, []);\n\n    const addContact = (e) => {\n        e.preventDefault();\n\n        const newPersonObject = {\n            name: newName,\n            number: newNumber\n        }\n\n        const msg = `${ newName } is already added to phonebook, replace the old number with a new one?`\n        const duplicatePerson = persons.find(p => p.name === newName);\n\n        // using truthy to check if duplicate is found\n        if (duplicatePerson) {\n            if (window.confirm(msg) === true) {\n                personService\n                    .update(duplicatePerson.id, newPersonObject)\n                    .then(returnedPerson => {\n\n                        setNotificationMessage({\n                            \"text\": `Updated ${ returnedPerson.name }`,\n                            \"type\": \"notification\"\n                        })\n\n                        setTimeout(() => {\n                            setNotificationMessage(null)\n                        }, 5000)\n\n                        setPersons(persons.map(p => p.id !== duplicatePerson.id ? p : returnedPerson))\n                    })\n            }\n        } else {\n            personService\n                .create(newPersonObject)\n                .then(returnedPerson => {\n\n                    setNotificationMessage({\n                        \"text\": `Added ${ returnedPerson.name }`,\n                        \"type\": \"notification\"\n                    })\n\n                    setTimeout(() => {\n                        setNotificationMessage(null)\n                    }, 5000)\n\n                    setPersons(persons.concat(returnedPerson))\n                })\n        }\n    }\n\n    const destroyContact = (e) => {\n        const id = Number(e.target.id)\n        const name = e.target.name\n        const msg = `Do you really want to delete ${ name }?`\n\n        if (window.confirm(msg) === true) {\n            personService\n                .destroy(id)\n                .then(destroyedPerson => {\n                    setPersons(persons.filter(p => p.id !== id))\n                })\n                .catch(error => {\n                    setNotificationMessage({\n                        \"text\": `The person, ${ name } was already removed from server`,\n                        \"type\": \"error\"\n                    })\n\n                    setTimeout(() => {\n                        setNotificationMessage(null)\n                    }, 5000)\n\n                    setPersons(persons.filter(p => p.id !== id))\n                })\n        }\n    }\n\n    const handleNameChange = (e) => setNewName(e.target.value)\n    const handleNumberChange = (e) => setNewNumber(e.target.value)\n    const handleFilterChange = (e) => setNewFilter(new RegExp(e.target.value, 'ig'))\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n\n            { notificationMessage !== null ? <Notification message={ notificationMessage } /> : null }\n\n            <Filter\n                handleFilterChange={ (e) => { handleFilterChange(e) } }\n            />\n\n            <h2>Add a new</h2>\n            <PersonForm\n                addContact={ (e) => addContact(e) }\n                handleNameChange={ (e) => handleNameChange(e) }\n                handleNumberChange= { (e) => handleNumberChange(e) }\n            />\n\n            <h2>Numbers</h2>\n            <Persons\n                persons={ personsToShow }\n                destroyContact={ (e) => destroyContact(e) }\n            />\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}